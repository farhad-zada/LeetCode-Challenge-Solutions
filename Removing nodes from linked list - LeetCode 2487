'''
You are given the head of a linked list.
Remove every node which has a node with a strictly greater value anywhere to the right side of it.
Return the head of the modified linked list.

--> 1:
Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.

--> 2:
Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.

Constraints:
The number of the nodes in the given list is in the range [1, 105].
1 <= Node.val <= 10**5
'''


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
    
    
    ''' MY SOLUTION '''
    
        vals = [] # Intitialize vals
        while head: # Obtaining every value and getting rid of values less than a value comes after it
            while vals and vals[-1] < head.val:
                vals.pop()
            vals.append(head.val)
            head = head.next

        head = new_head = ListNode(0, None) 
        for val in vals: # Generating a new ListNode/Linked List
            new_head.next = ListNode(val, None)
            new_head = new_head.next
        return head.next
        
        
For any kind of discussion I put my contacts here:
farhad.szd@gmail.com
+994557367002 (WhatsApp)
@farhad_zada_ (instagar)

            
